// create-swagger-spec.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './src/app.module'; // Adjust path if script is not in root
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication, ValidationPipe } from '@nestjs/common'; // Added ValidationPipe
import * as fs from 'fs';
import * as _ from 'lodash'; // For deep merging if multiple swagger docs are generated by modules
import validationOptions from './src/utils/validation-options'; // Import validationOptions

async function bootstrap() {
  const app = await NestFactory.create(AppModule, { logger: false }); // Disable logger for cleaner output

  // Apply global pipes that might affect DTO presentation in Swagger
  // As seen in main.ts, validationOptions are used.
  app.useGlobalPipes(new ValidationPipe(validationOptions));

  const config = new DocumentBuilder()
    .setTitle('Backend API')
    .setDescription('The API description for the backend services')
    .setVersion('1.0')
    .addBearerAuth() // If JWT auth is used
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    // Include extra models that might not be directly referenced in controllers
    // but are part of the API (e.g., through deep relations in responses)
    // For now, we rely on NestJS's automatic discovery.
    // extraModels: [User, Service, Review, Plan, Subscription, Availability] // Example
  });

  // The boilerplate's main.ts does not use SwaggerModule.getDocuments(), so this part might not be strictly necessary
  // but it's a good general approach for more complex setups.
  // For this project, 'document' itself is likely complete.
  // const allDocuments = _.values(SwaggerModule.getDocuments()).map((doc) => doc);
  // const mergedDocument = allDocuments.reduce(
  //   (acc, currentDoc) => _.mergeWith(acc, currentDoc, (objValue, srcValue) => {
  //     if (_.isArray(objValue)) {
  //       return _.unionWith(objValue, srcValue, _.isEqual);
  //     }
  //   }),
  //   document, // Start with the main document
  // );
  // For this project, mergedDocument will be the same as document as no other documents are registered via SwaggerModule.add इसको document().

  fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2)); // Using 'document' directly
  console.log('Swagger specification generated successfully: swagger-spec.json');
  await app.close();
}

bootstrap().catch(err => {
  console.error('Error generating Swagger spec:', err);
  process.exit(1);
});
